version: 0.2
phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPO_URL=$(aws ssm get-parameter --name /plugfolio/GitRepoUrl --query Parameter.Value --output text)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$CODEBUILD_BUILD_NUMBER
  build:
          commands:
            - echo Cloning repository...
            - git clone $REPO_URL app
            - cd app
            # Detect tech stack
            - |
              if [ -f "plugfolio.yml" ]; then
                TECH=$(cat plugfolio.yml | grep "tech:" | awk '{print $2}')
              else
                if [ -f "package.json" ]; then TECH="typescript"
                elif [ -f "requirements.txt" ]; then TECH="python"
                elif [ -f "pom.xml" ]; then TECH="java"
                else echo "Error: Could not detect tech stack" && exit 1
                fi
              fi
            # Generate Dockerfile if not present
            - |
              if [ ! -f "Dockerfile" ]; then
                if [ "$TECH" = "typescript" ] || [ "$TECH" = "node" ]; then
                  cat <<EOT > Dockerfile
                  FROM node:16
                  WORKDIR /app
                  COPY package*.json ./
                  RUN npm install
                  COPY . .
                  RUN if [ -f "tsconfig.json" ]; then npm install typescript && npm run build; else npm install; fi
                  EXPOSE 3000
                  CMD ["npm", "start"]
                  EOT
                elif [ "$TECH" = "python" ]; then
                  cat <<EOT > Dockerfile
                  FROM python:3.9-slim
                  WORKDIR /app
                  COPY requirements.txt ./
                  RUN pip install -r requirements.txt
                  COPY . .
                  EXPOSE 5000
                  CMD ["python", "app.py"]
                  EOT
                elif [ "$TECH" = "java" ]; then
                  cat <<EOT > Dockerfile
                  FROM openjdk:11-jre-slim
                  WORKDIR /app
                  COPY target/*.jar app.jar
                  EXPOSE 8080
                  CMD ["java", "-jar", "app.jar"]
                  EOT
                else
                  echo "Error: Unsupported tech stack: $TECH" && exit 1
                fi
              fi
            - echo Building Docker image...
            - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
            - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - echo Pushing Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - aws ssm put-parameter --name /plugfolio/DockerImageTag --value $IMAGE_TAG --type String --overwrite
